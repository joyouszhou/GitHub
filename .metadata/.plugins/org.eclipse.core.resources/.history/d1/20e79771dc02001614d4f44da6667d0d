package com.zhouhuan.common.utils;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.util.StringUtils;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.zhgame.common.custom.BusinessException;
import com.zhgame.common.custom.ErrorCode;
import com.zhgame.common.utils.buss.AppUtil;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;

public class SignUtil {
	protected final static Logger logger = LoggerFactory.getLogger(SignUtil.class);
	
	/**
	 * 创建签名
	 * 
	 * @param param
	 *            参数升序串
	 * @return
	 * @throws Exception
	 */
	public static String createSign(String param) throws Exception {
		StringBuffer result = new StringBuffer();
		MessageDigest md5 = MessageDigest.getInstance("MD5");
		md5.update(param.getBytes("UTF-8"));
		byte[] b = md5.digest();
		for (int i = 0; i < b.length; ++i) {
			int x = b[i] & 0xFF;
			int h = x >>> 4;
			int l = x & 0x0F;
			result.append((char) (h + ((h < 10) ? '0' : 'a' - 10)));
			result.append((char) (l + ((l < 10) ? '0' : 'a' - 10)));
		}
		return result.toString().substring(8, 24);
	}
	
	public boolean checkSign(String httpSign, String appKey, String appSecret, String data) throws Exception {
		String newSign = createSign(appKey + appSecret + data);
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		// logger.info("appKey:" + appKey + ";appSecret:" + appSecret +
		// ";httpSign:" + httpSign + ";newSign:" + newSign);
		System.out.println(appKey + appSecret + data);
		request.setAttribute("log_sign", "appKey:" + appKey + ";appSecret:" + appSecret + ";httpSign:" + httpSign + ";newSign:" + newSign);
		return httpSign.equals(newSign);
	}

	/**
	 * 创建参数升序串
	 * 
	 * @param request
	 *            请求对象
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public static String createParam(HttpServletRequest request) throws UnsupportedEncodingException {
		List<String> keyList = new ArrayList<String>();

		Enumeration<String> enumeration = request.getParameterNames();
		while (enumeration.hasMoreElements()) {
			String key = enumeration.nextElement();
			keyList.add(key);
		}
		Collections.sort(keyList, new Comparator<String>() {
			public int compare(String str1, String str2) {
				if (str1.compareTo(str2) > 0) {
					return 1;
				}
				if (str1.compareTo(str2) < 0) {
					return -1;
				}
				return 0;
			}
		});
		StringBuffer param = new StringBuffer();
		for (String key : keyList) {
			param.append(key);
			param.append("=");
			param.append(request.getParameter(key));
			param.append("&");
		}
		return param.toString().replaceAll("\n", "").replaceAll("\r", "");
	}

	/**
	 * ip白名单
	 * 
	 * @param ip
	 * @return
	 */
	public static boolean isIpList(String ip) {
		String iplist = PropertiesUtil.getProperty("iplist");
		if (iplist != null && !StringUtils.isEmpty(iplist)) {
			String writeList[] = PropertiesUtil.getProperty("iplist").split(";");
			for (String po : writeList) {
				if (po != null && ip.equals(po)) {
					return true;
				}
			}
		}
		return false;
	}

}
