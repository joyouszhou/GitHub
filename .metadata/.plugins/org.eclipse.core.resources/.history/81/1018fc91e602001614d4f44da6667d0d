package com.zhouhuan.common.core.spring;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.server.ServletServerHttpResponse;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.zhouhuan.common.utils.LogUtil;
import com.zhouhuan.common.utils.RequestUtil;
import com.zhouhuan.common.utils.buss.SystemInfoUtil;
import com.zhouhuan.common.custom.BusinessException;
import com.zhouhuan.common.custom.SystemException;
import com.zhouhuan.common.custom.base.ErrorCode;
import com.zhouhuan.common.custom.base.ErrorResponse;

public class CustomExcepitionHandler implements HandlerExceptionResolver {
	private static MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
	private static final String SYSTEM_ERROR = "SYSTEM-EXCEPTION";
	private static final String BUSINESS_ERROR = "BUSINESS-EXCEPTION";
	private static final String VALIDATE_ERROR = "VALIDATE-EXCEPTION";
	private static final String UNKNOW_ERROR = "UNKNOW-EXCEPTION";

	@Override
	public ModelAndView resolveException(HttpServletRequest arg0,
			HttpServletResponse arg1, Object obj, Exception e) {
		String accessInfo = LogUtil.accessString(arg0);// request访问所有信息
		String systemInfo = SystemInfoUtil.getInstance(arg0).getSystemInfo();
		String ret = RequestUtil.getUrl(arg0);
		ErrorResponse errorResponse = null;
		String context = "";

		if (e instanceof SystemException) {
			int errorCode = ((SystemException) e).getExceptionCode();
			String errorInfo = ((SystemException) e).getExceptionInfo();
			Exception ex = ((SystemException) e).getException();
			errorResponse = new ErrorResponse(errorCode, errorInfo, null, ret);
			context = ex == null ? SYSTEM_ERROR : ex.getMessage();
			if (StringUtils.isEmpty(context)) {
				context = ex.getMessage() == null ? "" : ex.getMessage();
			}
			arg1.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
			LogUtil.logError("GATEWAY-SYSTEMEXCEPTION", e);
		} else if (e instanceof BusinessException) {
			int errorCode = ((BusinessException) e).getExceptionCode();
			String errorInfo = ((BusinessException) e).getExceptionInfo();
			Exception ex = ((BusinessException) e).getException();
			errorResponse = new ErrorResponse(errorCode, errorInfo, null, ret);
			context = ex == null ? BUSINESS_ERROR : ex.getMessage();
			if (StringUtils.isEmpty(context)) {
				context = ex.getMessage() == null ? "" : ex.getMessage();
			}
			arg1.setStatus(HttpStatus.BAD_REQUEST.value());

		} else if (e instanceof MethodArgumentNotValidException) {// Form表单校验异常处理
			BindingResult result = ((MethodArgumentNotValidException) e)
					.getBindingResult();
			List<FieldError> fieldErrors = result.getFieldErrors();
			StringBuffer msgs = new StringBuffer();
			for (FieldError fieldError : fieldErrors) {
				msgs.append(fieldError.getDefaultMessage());
			}
			errorResponse = new ErrorResponse(
					ErrorCode.METHOD_ARGUMENT_NOTVALID, msgs.toString(),
					msgs.toString(), ret);
			context = msgs.toString() == null ? VALIDATE_ERROR : msgs
					.toString();
			arg1.setStatus(HttpStatus.BAD_REQUEST.value());

		} else {
			String msg = null;
			if (e.getCause() != null) {
				msg = e.getCause().getMessage();
			} else {
				msg = e.getLocalizedMessage();
			}
			msg = StringUtils.isBlank(msg) ? null : msg;
			errorResponse = new ErrorResponse(ErrorCode.SYSTEM_ERROR, msg,
					null, ret);
			context = (msg == null ? UNKNOW_ERROR : msg);
			arg1.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
			LogUtil.logError("GATEWAY-SYSTEMEXCEPTION", e);
		}

		try {
			arg0.setAttribute(LogUtil.SYS_LOG_RTNDATA, errorResponse);
			converter.write(errorResponse, MediaType.APPLICATION_JSON,
					new ServletServerHttpResponse(arg1));
		} catch (HttpMessageNotWritableException e1) {
			LogUtil.logError("GATEWAY-CUSTOMEXCEPITIONHANDLER-EXCEPTION", e1);
		} catch (IOException e1) {
			LogUtil.logError("GATEWAY-CUSTOMEXCEPITIONHANDLER-EXCEPTION", e1);
		}
		return null;
	}
}
