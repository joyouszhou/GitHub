package com.zhgame.common.utils.cache;

import java.util.Map;

import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;

import com.zhgame.common.core.mapper.BeanMapper;
import com.zhgame.common.core.spring.SpringContextHolder;

public class RedisUtil {
    
    private static RedisTemplate<String, Object> redisTemplate;
    
//    private static ValueOperations<String, Object> valueOper;
    
    private static HashOperations<String, String, Object> hashOper;
    
//    private static ZSetOperations<String, Object> zSetOper;
    
//    private static ListOperations<String, Object> listOper;
    
    static {
        redisTemplate = SpringContextHolder.getBean("redisTemplate");
//        valueOper = redisTemplate.opsForValue();
        hashOper = redisTemplate.opsForHash();
//        zSetOper = redisTemplate.opsForZSet();
//        listOper = redisTemplate.opsForList();
    }
    
    public static void put(String opKey, String key, Object value) throws Exception {
        hashOper.put(opKey, key, value);
    }
    
    public static void delete(String opKey) {
        redisTemplate.delete(opKey);
    }
    
    public static void rename(String oldKey, String newKey) {
        redisTemplate.rename(oldKey, newKey);
    }
    
    public static <T> T get(Class<T> classType, String opKey, String key) throws Exception {
        T t = classType.newInstance();
        BeanMapper.copy(hashOper.get(opKey, key), t);
        return t;
    }
    
    public static Object get(String opKey, String key) throws Exception {
        return hashOper.get(opKey, key);
    }
    
    public static Map<String, Object> getMap(String opKey) {
        return hashOper.entries(opKey);
    }
    
    public static Long getMapSize(String opKey) {
        return hashOper.size(opKey);
    }

}
