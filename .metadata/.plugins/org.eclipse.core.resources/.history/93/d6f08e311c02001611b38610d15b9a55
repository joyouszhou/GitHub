package com.zhgame.common.core.spring;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.util.StringUtils;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import com.zhgame.common.custom.BusinessException;
import com.zhgame.common.custom.ErrorCode;
import com.zhgame.common.utils.RequestUtil;
import com.zhgame.common.utils.SignUtil;

/**
 * @ClassName: MyPermissionsInteceptor
 * @Description: TODO (权限 签名连接器)
 * @author: Li Jiuchao
 * @date: 2014-4-1 上午10:20:36
 * 
 */
public class MyPermissionsInteceptor implements HandlerInterceptor {

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object obj, Exception e) throws Exception {
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object obj, ModelAndView view) throws Exception {
	}

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object obj) throws Exception {

		/************************************ 白名单 *******************************************/
		String ip = RequestUtil.getRequestIp(request);
		if (!StringUtils.isEmpty(ip) && SignUtil.isIpList(ip)) {
			return true;
		}
		/************************************** 陌陌  ******************************************/
		if(RequestUtil.getUrl(request).contains("/cyou/momo/addIdfa") && "momo".equals(request.getHeader("from"))){
			return true;
		}
		/************************************** efun*****************************************/
		if(RequestUtil.getUrl(request).contains("/cyou/order/efun/create.json")){
			return true;
		}
		/************************************** hk*****************************************/
		if(RequestUtil.getUrl(request).contains("/cyou/order/overseas/create.json")){
			return true;
		}
		if (checkHeaders(request)) {
			return SignUtil.checkSign(request);
		} else {
			throw new BusinessException(ErrorCode.NO_PERMISSION);
		}
	}

	/**
	 * 校验请求头中必传参数
	 * 
	 * @param request
	 * @return
	 * @throws MethodArgumentNotValidException
	 */
	private boolean checkHeaders(HttpServletRequest request) throws MethodArgumentNotValidException {
		String appKey = request.getHeader("app_key");
		String channelId = request.getHeader("channel_id");
		String tag = request.getHeader("tag");
		String httpSign = request.getHeader("sign");
		BindingResult result = new BeanPropertyBindingResult(null, "objectName");

		if (StringUtils.isEmpty(appKey)) {
			ObjectError error = new FieldError("appkey", "app_key", "app_key not null");
			result.addError(error);
			throw new MethodArgumentNotValidException(null, result);
		}
		if (StringUtils.isEmpty(channelId)) {
			ObjectError error = new FieldError("channel_id", "channel_id", "channel_id not null");
			result.addError(error);
			throw new MethodArgumentNotValidException(null, result);
		}
		if (StringUtils.isEmpty(tag)) {
			ObjectError error = new FieldError("tag", "tag", "tag not null");
			result.addError(error);
			throw new MethodArgumentNotValidException(null, result);
		}
		if (StringUtils.isEmpty(httpSign)) {
			ObjectError error = new FieldError("sign", "sign", "sign not null");
			result.addError(error);
			throw new MethodArgumentNotValidException(null, result);
		}
		return true;
	}
}
