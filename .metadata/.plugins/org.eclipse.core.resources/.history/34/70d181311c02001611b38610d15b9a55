package com.zhgame.common.utils;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.multipart.MultipartFile;

public class Md5Utils {

	private static final Logger LOGGER = LoggerFactory.getLogger(Md5Utils.class);
	public static String defaultKey = "cyou-mrd";

	private static byte[] md5(String s) {
		MessageDigest algorithm;
		try {
			algorithm = MessageDigest.getInstance("MD5");
			algorithm.reset();
			algorithm.update(s.getBytes("UTF-8"));
			byte[] messageDigest = algorithm.digest();
			return messageDigest;
		} catch (Exception e) {
			LOGGER.error("MD5 Error...", e);
			return null;
		}
	}

	private static final String toHex(byte hash[]) {
		if (hash == null) {
			return null;
		}
		StringBuffer buf = new StringBuffer(hash.length * 2);
		int i;

		for (i = 0; i < hash.length; i++) {
			if ((hash[i] & 0xff) < 0x10) {
				buf.append("0");
			}
			buf.append(Long.toString(hash[i] & 0xff, 16));
		}
		return buf.toString();
	}

	private static byte[] createChecksum(MultipartFile file) {
		InputStream fis = null;
		try {
			fis = file.getInputStream();
			byte[] buffer = new byte[1024];
			MessageDigest complete = MessageDigest.getInstance("MD5");
			int numRead = -1;

			while ((numRead = fis.read(buffer)) != -1) {
				complete.update(buffer, 0, numRead);
			}
			return complete.digest();
		} catch (FileNotFoundException e) {
			LOGGER.error(e.getMessage(), e);
		} catch (NoSuchAlgorithmException e) {
			LOGGER.error(e.getMessage(), e);
		} catch (IOException e) {
			LOGGER.error(e.getMessage(), e);
		} finally {
			try {
				if (null != fis) {
					fis.close();
				}
			} catch (IOException e) {
				LOGGER.error(e.getMessage(), e);
			}
		}
		return null;
	}

	public static String hash(String s) {
		try {
			return new String(toHex(md5(s)).getBytes("UTF-8"), "UTF-8");
		} catch (Exception e) {
			LOGGER.error("not supported charset...{}", e);
			return s;
		}
	}

	public static String hash(MultipartFile file) {
		try {
			return new String(toHex(createChecksum(file)).getBytes("UTF-8"), "UTF-8");
		} catch (Exception e) {
			LOGGER.error("not supported charset...{}", e);
		}
		return null;
	}

	public static String EncodeMD5Hex(String text) throws Exception {
		MessageDigest md = MessageDigest.getInstance("MD5");
		md.update(text.getBytes("UTF-8"));
		byte[] digest = md.digest();
		StringBuffer md5 = new StringBuffer();
		for (int i = 0; i < digest.length; i++) {
			md5.append(Character.forDigit((digest[i] & 0xF0) >> 4, 16));
			md5.append(Character.forDigit((digest[i] & 0xF), 16));
		}
		return md5.toString();
	}

	public static void main(String[] args) {
		String str="662f6890e3b9039ed4538904a840ffa32ae130c2ee0ee1b5cc6d58c655894271bf40ba910b8c1e5b7f13672d7788808c8649f2f273e42e40802b018d37b3ecf7ios_syshuangyuwangting^20c14c08y*11ting";
		System.out.println(Md5Utils.hash(str));
	}
	
}
